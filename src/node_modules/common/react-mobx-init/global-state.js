/**
 * @file global-state
 * @author gyl
 * @description 模块加载之前加载内容(国际化文件, 系统接口, 人员信息接口)
 */

import {observable, action} from 'mobx'
import Root from 'utils/Root'
import agent from 'utils/ajax-agent'
import i18n from 'utils/lib/i18n'
// import {BPROUTING_CONTEXT} from 'utils/common-extra-url' // 一个 bprooting 接口
import languageStorage from 'utils/lib/i18n-storage';
import storage from 'utils/storage'
import xhr from 'utils/ajax-agent/ajax-agent';
import {detectBrowser} from 'utils/lib/browser';

const localStorageLanguage = 'local_i18n_version'


export default class GlobalState extends Root {

    @observable initialized = false
    @observable user = {
        fullName: '路人甲',
        employeeNumber: 'B12345',
        departmentName: 'BP&IT'
    }
    @observable isHeaderVisible = true
    @observable isFooterVisible = true
    @observable isMenuVisible = true
    @observable isFixedWidth = false
    @observable crumbs = GlobalState.prefixCrumbs.slice()

    static prefixCrumbs = [
        {text: 'HOME', url: '#/'},
        {text: 'ESOP', url: '#/'}
    ]

    async initGlobal() {
        // await this.initReqContext()
        // let lang = storage.getItem(localStorageLanguage, 'LANGUAGE').lang

        // await i18n.load(window.LANGUAGE)
        // await i18n.load()
        // 做一些全局state的初始化
    }

    // ============================ 语言部分 ===================================
    @observable context = {
        ajaxAgent: xhr,
        // 上下文接口地址
        contextUrl: BPROUTING_CONTEXT,
    }

    get localLanguage() {
        return languageStorage.getItem(localStorageLanguage)
    }

    /**
     * 初始开发环境不需要调用 bprouting
     */
    @action
    initReqContext() {
        if (window.IS_DEV
            || String(window.APP_CONTEXT).indexOf('tpu-web') === -1) {
            let lang = (i18n.getLang() && i18n.getLang().lang) !== 'en_US' ? 'ZHS' : 'US'
            return this.commonGetLanguage(lang)
        }
        else {
            return this.getErpLanguage()
        }
    }

    @action
    getErpLanguage() {
        return agent.post(this.context.contextUrl, {isRawURL: true, isJSON: false})
            .then(action(res => {
                if (+res.code === 200) {
                    let language = 'ZHS'
                    if (res.data && res.data.localeLanguage) {
                        language = res.data.localeLanguage
                        // window.LANGUAGE = language === 'ZHS' ? 'zh-CN' : 'en-US'
                        this.getTpuLanguage(language)
                    }
                    else {

                        if (this.localLanguage && this.localLanguage.lang) {
                            language = this.localLanguage.lang === 'zh_CN' ? 'ZHS' : 'US'
                        }

                        this.commonGetLanguage(language)
                    }
                }
                else {

                    let language = 'ZHS'
                    if (this.localLanguage && this.localLanguage.lang) {
                        language = this.localLanguage.lang === 'zh_CN' ? 'ZHS' : 'US'
                    }

                    this.commonGetLanguage(language)
                }

            }))

    }

    commonGetLanguage(language) {
        return this.getTpuLanguage(language)
    }

    @action
    getTpuLanguage(language) {
        window.LANGUAGE = language === 'ZHS' ? 'zh-CN' : 'en-US'
        return agent.get('/mainPage/changeLang', {
            data: {
                lang: language
            }
        }).then(action(res => {
            if (+res.code === 200) {

            }
            else {
                error(res.message, 1500)
            }
        }))
    }

    // ================================ 语言部分 ========================================


    @action setCrumbs(crumbs = []) {
        this.crumbs = crumbs
    }

    @action appendCrumbs(crumbs = []) {
        this.setCrumbs(GlobalState.prefixCrumbs.concat(crumbs))
    }

    @action setProps(values) {
        for (let key in values) {
            if (values.hasOwnProperty(key)) {
                this[key] = values[key]
            }
        }
    }

    @action setHeaderVisible(visible) {
        this.isHeaderVisible = visible
    }

    @action setFooterVisible(visible) {
        this.isFooterVisible = visible
    }

    @action setMenuVisible(visible) {
        this.isMenuVisible = visible
    }

    @action setFixedWidth(isFixedWidth) {
        this.isFixedWidth = isFixedWidth
    }

    @action setMenuPermissions(menuPermissions) {
        this.menuPermissions = menuPermissions
    }

    @action setUser(user) {
        this.user = user
    }
}
