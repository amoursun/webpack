import {isDevMode} from '../lib/consts';

let agent = require('./ajax-agent').default;

import {CODE_SESSION_OVERDUE_OF_208, CODE__200} from '../lib/constants-code'

// 可以在这里扩展你的 agent, 加入 defaultGenericHandlers
// const genericSuccessHandler = response => {
//     return response;
// };

const wrapMethod = (obj, originMethod) =>
  function agentWithToast(...args) {
    return originMethod.apply(obj, args)
      .then(res => {
        if (isDevMode) {
          // console.log('请求参数：', args)
          // console.log('响应数据：', res)
        }
        return res
      })
      .then(res => {
        if (+res.code === CODE__200) {
          return res
        }
        else if (+res.code === CODE_SESSION_OVERDUE_OF_208) {
          location.reload()
        }
        else {
          let opt = args[2].toastError
          alert(`Error -> ${opt}`)
          return res
        }
      }, err => {
        if (isDevMode) {
          console.error(err)
          alert(`Error -> ${err.message}`)
        }
      })
  }

const wrappedAgent = wrapMethod(agent, agent)

const origin = agent
agent = function (method, url, options) {
  const toastError = options.toastError
  return toastError
    ? wrappedAgent.call(undefined, method, url, options)
    : origin.call(undefined, method, url, options);
}

const genericSuccessHandler = response => {
  // console.log(response)
  if (!response) {
    return {}
  }
  if (!response.body) {
    // 特殊处理 no-auth ,他返回 body 可能有值可能没有
    // 如果没有 body 则读取 Text
    if (+response.text.indexOf('need-login') > 0) {
      location.reload()
    }
    else {
      // urlUtils.jump('error/403')
      if (response.type.indexOf('application/json') > -1
        || response.type.indexOf('text/plain') > -1) {
        return response.text ? JSON.parse(response.text) : {}
      }
      else {
        return response
      }
    }
  }
  else {
    // if (!response.body.code) {
    //     location.reload();
    // }
    // else {
    //     switch (+response.body.code) {
    //         case CODE_SESSION_OVERDUE_OF_208:
    //             location.reload();
    //             break;
    //         default:
    //             return response;
    //     }
    // }
    switch (+response.body.code) {
      case CODE_SESSION_OVERDUE_OF_208:
        location.reload();
        break;
      default:
        return response;
    }
  }
};

const genericErrorHandler = () => {
};

function assembleOptions(options = {}) {
  options.header = {
    Accept: 'application/json',
    'Content-type': 'application/json'
  };
  options.genericSuccessHandler = genericSuccessHandler && genericSuccessHandler.bind(options);
  options.genericErrorHandler = genericErrorHandler;

  return options
}

agent.post = function (url, options = {}) {
  return agent('post', url, assembleOptions(options));
};

agent.get = function (url, options = {}) {
  return agent('get', url, assembleOptions(options));
};

// 本方法给 entries_module 开发使用
/* globals __DEVELOPMENT__ */
if (__DEVELOPMENT__) {
  agent.devPost = function (url, options = {}) {
    options.isRawUrl = true;
    url = '/_/entries_module/api' + url;
    return agent('post', url, options);
  };
}

export default agent;
